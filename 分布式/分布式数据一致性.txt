1: 分布式数据一致性： 对数据做了修改，读取到的数据一定是最新的。【分布式协同一个知识点】


2: 一致性分为： 主从副本一致性【mysql主-》mysql从】，事务一致性【mysql 和 redis，mysql到mysql】。


3: 数据一致性解决的方案：强一致性，弱一致性，最终一致性

    mysql主从同步强一致性解决方案：主从复制方式有三种：全同步【强】、异步【弱一致性】、半同步【弱一致性】，开启全同步即可，性能很差
    rpl_semi_sync_slave_enabled【需要安装插件】/【syn_binglog是控制binlog落盘的】/全同步配置较复杂【需要安装插件】
    redis主从强一致性： 暂无
    
    
【
异步复制（Asynchronous replication）
MySQL默认的复制即是异步的，主库在执行完客户端提交的事务后会立即将结果返给给客户端，并不关心从库是否已经接收并处理，这样就会有一个问题，
主如果crash掉了，此时主上已经提交的事务可能并没有传到从上，如果此时，强行将从提升为主，可能导致新主上的数据不完整。

全同步复制（Fully synchronous replication）
指当主库执行完一个事务，所有的从库都执行了该事务才返回给客户端。因为需要等待所有从库执行完该事务才能返回，所以全同步复制的性能必然会收到严重的影响。

半同步复制（Semisynchronous replication）
介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到relay log中才返回给客户端。
相对于异步复制，半同步复制提高了数据的安全性，同时它也造成了一定程度的延迟，这个延迟最少是一个TCP/IP往返的时间。所以，半同步复制最好在低延时的网络中使用。
】

 事务强一致性方案：2pc，3pc，tcc等,效果不理想

 
 事务弱一致性方案：binlog同步方案，触发器，常规业务写法【顺序业务逻辑+最终一致性方案】


 事务最终一致性方案：消息队列
 
 
 4:一致性算法：也叫共识算法，防止单点故障
 
